package com.github.vokorm

import com.gitlab.mvysny.jdbiorm.Dao
import com.gitlab.mvysny.jdbiorm.Ignore
import com.gitlab.mvysny.jdbiorm.Table
import org.hibernate.validator.constraints.Length
import org.jdbi.v3.core.mapper.reflect.ColumnName
import java.time.Instant
import java.time.LocalDate
import java.util.*

/**
 * A test table that tests the most basic cases. The ID is auto-generated by the database.
 */
@Table("Test")
data class Person(
        override var id: Long? = null,
        @field:Length(min = 1)
        var name: String = "",
        var age: Int = -1,
        @Ignore var ignored: String? = null,
        @Transient var ignored2: Any? = null,
        var dateOfBirth: LocalDate? = null,
        var created: Date? = null,
        var modified: Instant? = null,
    // test of aliased field
        @field:ColumnName("alive")
        var isAlive25: Boolean? = null,
        var maritalStatus: MaritalStatus? = null

) : KEntity<Long> {

    override fun save(validate: Boolean) {
        if (id == null) {
            if (created == null) created = java.sql.Timestamp(System.currentTimeMillis()).withZeroMillis
            // otherwise we can't test 'search by `modified`'
            if (modified == null) modified = Instant.ofEpochMilli(1238123123L).withZeroNanos
        }
        super.save(validate)
    }

    // should not be persisted into the database since it's not backed by a field.
    fun getSomeComputedValue(): Int = age + 2

    // should not be persisted into the database since it's not backed by a field.
    val someOtherComputedValue: Int get() = age

    companion object : Dao<Person, Long>(Person::class.java) {
        val IGNORE_THIS_FIELD: Int = 0
    }
}

enum class MaritalStatus {
    Single,
    Married,
    Divorced,
    Widowed
}
